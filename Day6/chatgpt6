Day 6: STL Containers and File I/O
1. STL Containers
The STL provides various containers like vector, list, map, and set to manage collections of data. Let's explore some of these.

Vector

A vector is a dynamic array that can change size.

Code: Vector Example

cpp
Copy code
#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Adding elements
    numbers.push_back(6);
    numbers.push_back(7);

    // Accessing elements
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    // Removing elements
    numbers.pop_back(); // Removes last element

    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
Explanation:

std::vector<int> numbers = {1, 2, 3, 4, 5};: Initializes a vector with values.
numbers.push_back(6);: Adds an element to the end.
numbers.pop_back();: Removes the last element.
Iterates through the vector to print elements.
Map

A map is a collection of key-value pairs.

Code: Map Example

cpp
Copy code
#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ageMap;

    // Adding elements
    ageMap["Alice"] = 30;
    ageMap["Bob"] = 25;

    // Accessing elements
    std::cout << "Alice's age: " << ageMap["Alice"] << std::endl;

    // Iterating over the map
    for (const auto &pair : ageMap) {
        std::cout << pair.first << ": " << pair.second << std::endl;
    }

    return 0;
}
Explanation:

std::map<std::string, int> ageMap;: Initializes a map.
ageMap["Alice"] = 30;: Adds a key-value pair.
Iterates through the map to print elements.
2. File I/O
File I/O allows you to read from and write to files.

Code: File I/O Example

cpp
Copy code
#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::string filename = "example.txt";

    // Writing to a file
    std::ofstream outFile(filename);
    if (outFile.is_open()) {
        outFile << "Hello, World!" << std::endl;
        outFile << "C++ File I/O" << std::endl;
        outFile.close();
    }

    // Reading from a file
    std::ifstream inFile(filename);
    if (inFile.is_open()) {
        std::string line;
        while (getline(inFile, line)) {
            std::cout << line << std::endl;
        }
        inFile.close();
    }

    return 0;
}
Explanation:

std::ofstream outFile(filename);: Opens a file for writing.
outFile << "Hello, World!" << std::endl;: Writes to the file.
std::ifstream inFile(filename);: Opens a file for reading.
getline(inFile, line): Reads lines from the file.
3. Embedded Systems Insight
In embedded systems, file I/O might involve reading from or writing to SD cards or flash memory, and STL containers can be used to manage data efficiently.

Embedded Example: Data Logging (Pseudo-code)

cpp
Copy code
#include <iostream>
#include <vector>
#include <fstream>

// Pseudo-code for an embedded environment
class DataLogger {
public:
    DataLogger(const std::string &filename) : filename(filename) {}

    void logData(const std::vector<int> &data) {
        std::ofstream outFile(filename, std::ios::app); // Append mode
        if (outFile.is_open()) {
            for (int value : data) {
                outFile << value << std::endl;
            }
            outFile.close();
        }
    }

    void readData() {
        std::ifstream inFile(filename);
        if (inFile.is_open()) {
            std::string line;
            while (getline(inFile, line)) {
                std::cout << line << std::endl;
            }
            inFile.close();
        }
    }

private:
    std::string filename;
};

int main() {
    DataLogger logger("data_log.txt");

    std::vector<int> data = {100, 200, 300};
    logger.logData(data);

    logger.readData();

    return 0;
}
Explanation:

DataLogger: Class to handle logging data to a file.
logData: Method to log data.
readData: Method to read logged data.
4. Combining with Multi-threading
Combining multi-threading with STL containers and file I/O can help manage concurrent data processing and logging.

Example: Multi-threaded Data Logging (Pseudo-code)

cpp
Copy code
#include <iostream>
#include <vector>
#include <thread>
#include <fstream>
#include <mutex>
#include <chrono>

std::mutex logMutex;

class DataLogger {
public:
    DataLogger(const std::string &filename) : filename(filename) {}

    void logData(const std::vector<int> &data) {
        std::lock_guard<std::mutex> guard(logMutex);
        std::ofstream outFile(filename, std::ios::app); // Append mode
        if (outFile.is_open()) {
            for (int value : data) {
                outFile << value << std::endl;
            }
            outFile.close();
        }
    }

    void readData() {
        std::lock_guard<std::mutex> guard(logMutex);
        std::ifstream inFile(filename);
        if (inFile.is_open()) {
            std::string line;
            while (getline(inFile, line)) {
                std::cout << line << std::endl;
            }
            inFile.close();
        }
    }

private:
    std::string filename;
};

void generateData(DataLogger &logger, int start) {
    for (int i = 0; i < 5; ++i) {
        std::vector<int> data = {start + i, start + i + 1, start + i + 2};
        logger.logData(data);
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

int main() {
    DataLogger logger("data_log.txt");

    std::thread t1(generateData, std::ref(logger), 100);
    std::thread t2(generateData, std::ref(logger), 200);

    t1.join();
    t2.join();

    logger.readData();

    return 0;
}
Explanation:

std::mutex logMutex: Mutex to protect file access.
std::lock_guard<std::mutex> guard(logMutex): Locks the mutex in a scoped manner.
generateData: Function to generate and log data in a separate thread.
Two threads t1 and t2 generate and log data concurrently.
Daily Challenge:
Create a Logger class with methods to log different types of data (int, float, string) using templates.
Write a program that reads sensor data in one thread and logs it in another thread using the Logger class.
Implement error handling in the Logger class to handle file I/O errors.
